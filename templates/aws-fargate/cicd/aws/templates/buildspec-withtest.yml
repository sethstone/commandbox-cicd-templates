version: 0.2

env:
  parameter-store:
    DOCKERHUB_USERNAME: @@CICDTEMPLATE_PROJECT_PREFIX@@-DOCKERHUB_USERNAME
    DOCKERHUB_PASSWORD: @@CICDTEMPLATE_PROJECT_PREFIX@@-DOCKERHUB_PASSWORD

phases:
  install:
    runtime-versions:
      java: openjdk11
    commands:
      # Get Commandbox
      - curl -fsSl https://downloads.ortussolutions.com/debs/gpg | apt-key add -
      - echo "deb https://downloads.ortussolutions.com/debs/noarch /" | tee -a /etc/apt/sources.list.d/commandbox.list
      - apt-get update && apt-get --assume-yes install apt-transport-https commandbox
  pre_build:
    commands:
      - docker --version
      - aws --version
      # Login to both DockerHub and Amazon ECR
      - echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - aws ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
  build:
    commands:
      # Build Image
      - echo Docker image build started on $(date)
      # BUILDKIT var required to correctly load Dockerfile.dockerignore, but also generates a lot of debugging output
      - DOCKER_BUILDKIT=1 docker image build -f cicd/docker/commandbox/Dockerfile -t ${REPOSITORY_URI}:${IMAGE_TAG} .
      - echo Docker image build completed on $(date)
      #
      # Test Image
      # First, copy in the test ENV file from S3 (Note: sensitive values should be loaded via Parameter Store)
      - aws s3 cp s3://@@CICDTEMPLATE_PROJECT_PREFIX@@-env-build-testing/build-testing.env .
      #  
      # Install testbox in the build environment and then mount testbox/ and tests/ into the container (since they are
      # not part of the production image).  Also, to override the behavior of the Commandbox Server Profile=Production
      # we mount an empty ".predicateFile.txt" into the server home directory to disable the restrictions on certain
      # sensitive web paths so we can test the application inside the container.
      - test -d "testbox" || box install testbox
      - touch emptyfile
      - >
        docker run -d --name codebuild_${ECR_REPO_NAME} --env-file=build-testing.env -p 8080:8080
        -v $(pwd)/testbox:/app/testbox
        -v $(pwd)/tests:/app/tests
        -v $(pwd)/emptyfile:/usr/local/lib/serverHome/.predicateFile.txt
        $REPOSITORY_URI:$IMAGE_TAG
      # Wait for container to become healthy and execute tests in conventional location.
      - echo Waiting for container healthy status started on $(date)
      - export DOCKER_INSPECT_CMD="docker inspect --format {{.State.Health.Status}} codebuild_${ECR_REPO_NAME}"
      - timeout 60 bash -c 'until [[ "$(${DOCKER_INSPECT_CMD})" == "healthy" ]]; do echo -n .; sleep 3; done'
      - echo Waiting for container healthy status completed on $(date)
      # run tests
      - echo Running tests started on $(date)
      - box testbox run runner="http://localhost:8080/tests/runner.cfm?method=runRemote" 
      - echo Running tests completed on $(date)
  post_build:
    commands:
      # Execute this section only if build phase succeeded
      - test "$CODEBUILD_BUILD_SUCCEEDING" = "1"
      # Push image to ECR
      - echo Pushing the Docker image...
      - docker push ${REPOSITORY_URI}:${IMAGE_TAG}
      # Create output artifacts for next stage
      - echo Create deploy stage artifacts...
      - printf '{"ImageURI":"%s"}' ${REPOSITORY_URI}:${IMAGE_TAG} > imageDetail.json
      - cp cicd/aws/templates/task-definition.json.tmpl task-definition.json
      - sed -i "s|CICDTEMPLATE_TASK_EXECUTION_ROLE_ARN|${TASKEXEC_ROLE}|g" task-definition.json
      - sed -i "s|CICDTEMPLATE_AWS_REGION|${AWS_REGION}|g" task-definition.json
      - cp cicd/aws/templates/appspec.yml appspec.yml
artifacts:
  files:
    - imageDetail.json
    - task-definition.json
    - appspec.yml